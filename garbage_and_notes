" ============================
" === Fix keys inside tmux ===
" ============================

" <http://sourceforge.net/p/tmux/tmux-code/ci/master/tree/FAQ>
" => * How do I make Ctrl-PgUp and Ctrl-PgDn work in vim?
" if &term == "screen"
"   set t_kN=^[[6;*~
"   set t_kN=[5~
"   set t_kP=^[[5;*~
" endif

" ============
" === Tabs ===
" ============
" http://stackoverflow.com/questions/102384/using-vims-tabs-like-buffers/3476411#3476411
" tab sball
" set switchbuf=usetab,split
" open every buffer in its own tab
" au BufAdd,BufNewFile,BufRead * nested tab sball
" autocmd BufAdd,BufNewFile * nested tab sball

" Tab navigation like in Firefox
" Notice that 'sbnext' and 'sbprevious' would reopen closed tabs instead.
" Used for the buffers instead.
" nnoremap <C-Pageup>   :tabprevious<cr>
" nnoremap <C-Pagedown> :tabnext<cr>
" inoremap <C-Pageup>   :tabprevious<cr>
" inoremap <C-Pagedown> :tabnext<cr>

" <http://stackoverflow.com/questions/2468939/how-to-let-tab-display-only-file-name-rather-than-the-full-path-in-vim>
" set guitablabel=\[%N\]\ %t\ %M

" ===========================================================
" === NOTE: Support for CTRL-S and CTRL-Q in the terminal ===
" ===========================================================
" Normally CTRL-S and CTRL-Q suspend and wake up the terminal output in
" terminal emulators (respectively freezing and unfreezing).
" Put this function in the .bashrc to allow instead passing the key combo
" through to vim.
" TODO it's probably better to use something different from `s` and `q` instead.
"
" vim() {
"   local STTYOPTS="$(stty --save)"
"   stty stop '' -ixoff # pass CTRL-S
"   stty start '' -ixon # pass CTRL-Q
"   command vim "$@"
"   stty "$STTYOPTS"
" }

" ============
" === Save ===
" ============
" <http://vim.wikia.com/wiki/Map_Ctrl-S_to_save_current_or_new_files>
" Save, but only if the buffer is modified.
" Disabled in insert mode, actually not necessary and just confusing.
" inoremap <C-s> <esc>:update<cr>a
" nnoremap <C-s> :update<cr>

" ===============
" === Buffers ===
" ===============

" ...next
" nnoremap <C-j> :bn<cr>
" ...previous
" nnoremap <C-k> :bp<cr>

" =================
" === Clipboard ===
" =================
" set clipboard=unnamedplus
" ctrl-v conflicts with visual block, and is not very useful anyway
" nnoremap <C-e> "+gP
" inoremap <C-e> <Esc>"+gPi
" TODO: not working
" nnoremap <Leader>o "+gP
" vnoremap <Leader>y "+y

" ===================
" === Real delete ===
" ===================
" nnoremap <C-f> "_dd
" This is not handy, because the leader has to be released to repeat the
" action.
" nnoremap <leader>d "_dd
" vnoremap <leader>d "_d

" ==================================
" === Autowrite, Backup and Undo ===
" ==================================
" This probably won't work in the terminal.
" augroup save
"   autocmd!
"   autocmd FocusLost * wall
"   " or suppress warnings for untitled and read-only buffers
"   " au FocusLost * silent! wa
" augroup END
"
" set autowrite
" set autowriteall

" Save swap and undo files elsewhere
" create the dirs if they don't exist, trick from
" <https://github.com/ahawkins/dotfiles/blob/master/vimrc>
" silent !mkdir ~/.vim/swap > /dev/null 2>&1
" silent !mkdir ~/.vim/undo > /dev/null 2>&1
" set backupdir=~/.vim/swap/
" set undodir=~/.vim/undo/
" set undofile " persistent-undo
" set noundofile

" ====================
" === Code folding ===
" ====================
" http://smartic.us/2009/04/06/code-folding-in-vim/
" fold based on syntax
" set foldmethod=syntax
" deepest fold is 7 levels
" set foldnestmax=7
" 2 columns is considered the minumum useful value, although 1 can still serve
" set foldcolumn=0
" no folds are closed when opening a file: can be done in two ways
" - option 1
" set nofoldenable
" - option 2
" set foldlevelstart=99
" set foldlevel=1

" " <http://learnvimscriptthehardway.stevelosh.com/chapters/38.html>
" function! ToggleFoldAndNumbers()
"   " Toggle line numbers
"   setlocal number!

"   " Toggle fold column
"   if &foldcolumn
"     setlocal foldcolumn=0
"   else
"     setlocal foldcolumn=2
"   endif
" endfunction

" nnoremap <leader>z :call ToggleFoldAndNumbers()<cr>

" ====================
" === View options ===
" ====================
" wrap long lines
" set wrap
" ensure newline and the end of file (the default anyway)
" set eol
" Colors of the vertical rulers
" " To set the colors in a terminal version of Vim, add the following to .vimrc:
" " To see the available color names, issue the command :help ctermbg.
" highlight ColorColumn ctermbg=DarkGray

" ==========================
" === Search and Replace ===
" ==========================
" Don't wrap around (don't start from the beginning when reached the end)
" set nowrapscan
" clear search results pressing space or with the return key
" (destroy all software trick) (but this interferes with Ack-vim, can't use
" enter to go to the result)
" nnoremap <CR> :nohlsearch<CR>

" ================================
" === Search visually selected ===
" ================================

" <http://amix.dk/vim/vimrc.html>
" Visual mode pressing * or # searches for the current selection
" vnoremap <silent> * :call VisualSelection('f')<CR>
" vnoremap <silent> # :call VisualSelection('b')<CR>
"
" function! VisualSelection(direction) range
"     let l:saved_reg = @"
"     execute "normal! vgvy"
"
"     let l:pattern = escape(@", '\\/.*$^~[]')
"     let l:pattern = substitute(l:pattern, "\n$", "", "")
"
"     if a:direction == 'b'
"         execute "normal ?" . l:pattern . "^M"
"     elseif a:direction == 'gv'
"         call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
"     elseif a:direction == 'replace'
"         call CmdLine("%s" . '/'. l:pattern . '/')
"     elseif a:direction == 'f'
"         execute "normal /" . l:pattern . "^M"
"     endif
"
"     let @/ = l:pattern
"     let @" = l:saved_reg
" endfunction

" =========================
" === Misc key mappings ===
" =========================
" Map :W to :update (save only when the buffer has been modified)
" Bad idea, because it will replace the letter 'W' with the word 'update'
" ANYWHERE in any command...
" cnoremap W update
" Map :Q to 'no op', effectively disabling it
" noremap Q <Nop>

" ===========
" === Ack ===
" ===========
" launch ack on current word with leader+A
" TODO: not working
" nnoremap <leader>A :Ack!<cword>

" ================
" === NERDTree ===
" ================
" From the NERDTree Readme.
" always open NERDTree when opening a file
" autocmd vimenter * NERDTree
" always open NERDTree even when there is no file open
" autocmd vimenter * if !argc() | NERDTree | endif
" close NERDTree if it is the only vim buffer open
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
"
" the additional NerdTreeTabs plugin makes NerdTree play better with tabs
" map <leader>n <plug>NERDTreeTabsToggle<cr>

" =======================
" === MiniBufExplorer ===
" =======================
" let g:miniBufExplBuffersNeeded = 1 " open immediately, don't wait for a second buffer

" prevent MiniBufExplorer from overriding custom colours
" let g:did_minibufexplorer_syntax_inits = 1

" Custom colors for buffers...
" highlight MBENormal ctermfg=15
" highlight MBEChanged ctermfg=199
" highlight MBEVisibleNormal ctermfg=14
" highlight MBEVisibleChanged ctermfg=178
" highlight MBEVisibleActiveNormal ctermfg=40
" highlight MBEVisibleActiveChanged ctermfg=199

" Custom colors for buffers...
" ...NOT CHANGED and NOT VISIBLE
" autocmd ColorScheme * highlight MBENormal ctermfg=15
" ...CHANGED and NOT VISIBLE
" autocmd ColorScheme * highlight MBEChanged ctermfg=199
" ...NOT CHANGED and VISIBLE
" autocmd ColorScheme * highlight MBEVisibleNormal ctermfg=14
" ...CHANGED and VISIBLE
" autocmd ColorScheme * highlight MBEVisibleChanged ctermfg=178
" ...NOT CHANGED, VISIBLE and ACTIVE
" autocmd ColorScheme * highlight MBEVisibleActiveNormal ctermfg=40
" ...CHANGED, VISIBLE and ACTIVE
" autocmd ColorScheme * highlight MBEVisibleActiveChanged ctermfg=199
